package com.nikita.server1.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.nikita.mapper.OrderMapper;
import com.nikita.model.order.OrderDto;
import com.nikita.model.order.OrderEntity;
import com.nikita.model.order.OrderRequestDto;
import com.nikita.model.outbox.EventStatus;
import com.nikita.model.outbox.EventType;
import com.nikita.model.outbox.OutboxEvent;
import com.nikita.server1.kafka.OrderEventPublisher;
import com.nikita.server1.repository.OrderRepository;
import com.nikita.server1.repository.OutboxRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.support.TransactionSynchronization;
import org.springframework.transaction.support.TransactionSynchronizationManager;

import java.util.UUID;

@Service
@RequiredArgsConstructor
public class ServerOneService {

    private final OrderRepository orderRepository;
    private final OrderMapper orderMapper;
    private final OrderEventPublisher orderEventPublisher;
    private final OutboxRepository outboxRepository;

    @Transactional
    public ResponseEntity<OrderDto> createOrder1(OrderRequestDto request) {
        OrderEntity entity = orderMapper.toEntity(request);
        entity.setOrderId(UUID.randomUUID());
        OrderEntity saved = orderRepository.save(entity);
        OrderDto dto = orderMapper.toDto(saved);
        try {
            orderEventPublisher.publishVariant1(dto).join();
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ Kafka variant1, –æ—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", e);
        }
        return new ResponseEntity<>(dto, HttpStatus.CREATED);

        /**
         üîπ –®–ø–∞—Ä–≥–∞–ª–∫–∞: –í–∞—Ä–∏–∞–Ω—Ç 1 ‚Äî try/catch + CompletableFuture.join()
         –ß—Ç–æ –¥–µ–ª–∞–µ–º:
         –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î —á–µ—Ä–µ–∑ orderRepository.save() –≤–Ω—É—Ç—Ä–∏ @Transactional.
         –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Kafka —á–µ—Ä–µ–∑ kafkaTemplate.send(...).join().
         join() –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
         –ï—Å–ª–∏ Kafka —É–ø–∞–¥—ë—Ç, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è CompletionException (unchecked).
         –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–∞—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ Kafka, —Ç–∞–∫ –∫–∞–∫ Spring –æ—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ unchecked-–∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö.
         –ü–ª—é—Å—ã:
         –ü—Ä–æ—Å—Ç–æ–π –∫–æ–¥, –ª–µ–≥–∫–æ –ø–æ–Ω—è—Ç—å.
         –û—à–∏–±–∫–∞ Kafka ‚Üí —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç—Å—è.
         –ú–∏–Ω—É—Å—ã:
         –ù–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏:
         –ï—Å–ª–∏ Kafka –ø—Ä–∏–º–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ commit —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∞ JVM —É–ø–∞–¥—ë—Ç ‚Üí —Å–µ—Ä–≤–µ—Ä 2 –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –ë–î.
         –ü–æ—Ç–æ–∫ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Kafka.
         */
    }

    @Transactional
    public ResponseEntity<OrderDto> createOrder2(OrderRequestDto request) {
        OrderEntity entity = orderMapper.toEntity(request);
        entity.setOrderId(UUID.randomUUID());

        OrderEntity saved = orderRepository.save(entity);
        OrderDto dto = orderMapper.toDto(saved);

        orderEventPublisher.publishVariant2(dto);
        return new ResponseEntity<>(dto, HttpStatus.CREATED);

        /**
         üîπ –®–ø–∞—Ä–≥–∞–ª–∫–∞: –í–∞—Ä–∏–∞–Ω—Ç 2 ‚Äî Kafka Transactions + @Transactional Hibernate
         –ß—Ç–æ –¥–µ–ª–∞–µ–º
         –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π KafkaTemplate —Å transactionIdPrefix –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Kafka.
         –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ —Å @Transactional (Hibernate/JPA —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è).
         –í—ã–∑—ã–≤–∞–µ–º kafkaTemplate.executeInTransaction(...) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka.
         –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–∞–¥–∞–µ—Ç –≤ –±–ª–æ–∫–µ Kafka ‚Üí —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è Kafka abort, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ‚Üí Hibernate —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç—Å—è.
         –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø–æ—Å–ª–µ commit Kafka ‚Üí –ë–î —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –º–æ–∂–µ—Ç –æ—Ç–∫–∞—Ç–∏—Ç—å—Å—è, –∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É—à–ª–æ –≤ Kafka ‚Üí –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω.
         üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ChainedTransactionManager —É—Å—Ç–∞—Ä–µ–ª–∞ –∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ.
         –ü–ª—é—Å—ã
         ¬´–ü—Å–µ–≤–¥–æ-–∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å¬ª DB + Kafka –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.
         –ù–µ—Ç —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–æ–≤, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–æ commit Kafka.
         –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å–ø–æ—Å–æ–± (–±–µ–∑ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ ChainedTransactionManager).
         –ú–∏–Ω—É—Å—ã
         –ü–æ–ª–Ω–æ–π –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ DB + Kafka –Ω–µ—Ç: –µ—Å–ª–∏ –ë–î –æ—Ç–∫–∞—Ç–∏—Ç—Å—è –ø–æ—Å–ª–µ commit Kafka ‚Üí –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω.
         –°–ª–æ–∂–Ω–µ–µ, —á–µ–º –æ–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
         –ü–æ—Ç–æ–∫ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Kafka –≤ executeInTransaction.

         üîπ –°—Ö–µ–º–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
         –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è Hibernate —á–µ—Ä–µ–∑ @Transactional.
         –°–æ–∑–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç OrderEntity –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ orderRepository.save().
         KafkaTemplate.executeInTransaction –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é Kafka.
         –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ Kafka (–≤ —Ä–∞–º–∫–∞—Ö Kafka tx).
         –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:
         –í—Å—ë –æ–∫ ‚Üí commit Kafka tx ‚Üí commit Hibernate tx (DB).
         –û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ executeInTransaction ‚Üí abort Kafka tx ‚Üí rollback Hibernate tx.
         –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ commit Kafka ‚Üí DB —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–∞—Ç–∏—Ç—Å—è, —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Kafka —É–∂–µ —É—à–ª–æ ‚Üí –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω.         */
    }

    @Transactional
    public ResponseEntity<OrderDto> createOrder3(OrderRequestDto request) {
        /// –°–û–•–†–ê–ù–Ø–ï–ú –ó–ê–ö–ê–ó
        OrderEntity entity = orderMapper.toEntity(request);
        entity.setOrderId(UUID.randomUUID());
        OrderEntity saved = orderRepository.save(entity);
        OrderDto dto = orderMapper.toDto(saved);

        /// –°–û–•–†–ê–ù–Ø–ï–ú –°–û–ë–´–¢–ò–ï –í OUTBOX
        OutboxEvent event = OutboxEvent.builder()
                .id(UUID.randomUUID())
                .orderId(dto.getOrderId())
                .payload(dto)
                .eventType(EventType.ORDER_CREATED)
                .status(EventStatus.NEW)
                .build();

        outboxRepository.save(event);
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞
        TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronization() {
            @Override
            public void afterCommit() {
                orderEventPublisher.publishVariant3(dto)
                        .whenComplete((result, exception) -> {
                            if (exception == null) {
                                // –ö–∞—Ñ–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                event.setStatus(EventStatus.SENT);
                                outboxRepository.save(event);
                            } else {
                                System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Kafka: \n" + exception.getMessage());
                            }
                        });
            }
        });

        return new ResponseEntity<>(dto, HttpStatus.CREATED);
    }
}
